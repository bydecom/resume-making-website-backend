const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const fs = require("node:fs");
const mime = require("mime-types");

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseModalities: [
  ],
  responseMimeType: "application/json",
  responseSchema: {
    type: "object",
    properties: {
      personalInfo: {
        type: "object",
        properties: {
          firstName: {
            type: "string"
          },
          lastName: {
            type: "string"
          },
          email: {
            type: "string",
            format: "email"
          },
          phone: {
            type: "string"
          },
          location: {
            type: "string"
          },
          country: {
            type: "string"
          },
          website: {
            type: "string",
            format: "url"
          },
          linkedin: {
            type: "string",
            format: "url"
          }
        },
        required: [
          "firstName",
          "lastName",
          "email",
          "phone",
          "location",
          "country"
        ]
      },
      summary: {
        type: "string",
        maxLength: 2000
      },
      education: {
        type: "array",
        items: {
          type: "object",
          properties: {
            degree: {
              type: "string"
            },
            school: {
              type: "string"
            },
            startDate: {
              type: "string",
              format: "date"
            },
            endDate: {
              type: "string",
              format: "date"
            },
            description: {
              type: "string"
            },
            isPresent: {
              type: "boolean"
            }
          },
          required: [
            "degree",
            "school",
            "startDate"
          ]
        }
      },
      experience: {
        type: "array",
        items: {
          type: "object",
          properties: {
            title: {
              type: "string"
            },
            company: {
              type: "string"
            },
            startDate: {
              type: "string",
              format: "date"
            },
            endDate: {
              type: "string",
              format: "date"
            },
            description: {
              type: "string"
            },
            isPresent: {
              type: "boolean"
            }
          },
          required: [
            "title",
            "company",
            "startDate"
          ]
        }
      },
      skills: {
        type: "array",
        items: {
          type: "string"
        }
      },
      projects: {
        type: "array",
        items: {
          type: "object",
          properties: {
            title: {
              type: "string"
            },
            role: {
              type: "string"
            },
            startDate: {
              type: "string",
              format: "date"
            },
            endDate: {
              type: "string",
              format: "date"
            },
            description: {
              type: "string"
            },
            url: {
              type: "string",
              format: "url"
            },
            isPresent: {
              type: "boolean"
            }
          },
          required: [
            "title",
            "role",
            "startDate"
          ]
        }
      },
      certifications: {
        type: "array",
        items: {
          type: "object",
          properties: {
            name: {
              type: "string"
            },
            issuer: {
              type: "string"
            },
            date: {
              type: "string",
              format: "date"
            },
            url: {
              type: "string",
              format: "url"
            }
          },
          required: [
            "name",
            "issuer",
            "date"
          ]
        }
      },
      languages: {
        type: "array",
        items: {
          type: "object",
          properties: {
            language: {
              type: "string"
            },
            proficiency: {
              type: "string"
            }
          },
          required: [
            "language",
            "proficiency"
          ]
        }
      },
      additionalInfo: {
        type: "object",
        properties: {
          interests: {
            type: "string"
          },
          achievements: {
            type: "string"
          },
          publications: {
            type: "string"
          },
          references: {
            type: "string"
          }
        }
      },
      customFields: {
        type: "array",
        items: {
          type: "object",
          properties: {
            label: {
              type: "string"
            },
            value: {
              type: "string"
            }
          },
          required: [
            "label",
            "value"
          ]
        }
      }
    },
    required: [
      "personalInfo",
      "summary",
      "education",
      "experience",
      "skills"
    ]
  },
};

async function run() {
  const chatSession = model.startChat({
    generationConfig,
    history: [
    ],
  });

  const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  // TODO: Following code needs to be updated for client-side apps.
  const candidates = result.response.candidates;
  for(let candidate_index = 0; candidate_index < candidates.length; candidate_index++) {
    for(let part_index = 0; part_index < candidates[candidate_index].content.parts.length; part_index++) {
      const part = candidates[candidate_index].content.parts[part_index];
      if(part.inlineData) {
        try {
          const filename = `output_${candidate_index}_${part_index}.${mime.extension(part.inlineData.mimeType)}`;
          fs.writeFileSync(filename, Buffer.from(part.inlineData.data, 'base64'));
          console.log(`Output written to: ${filename}`);
        } catch (err) {
          console.error(err);
        }
      }
    }
  }
  console.log(result.response.text());
}

run();