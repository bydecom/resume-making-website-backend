# Tài liệu API hệ thống quản lý CV và đánh giá CV

## 1. Tổng quan

Hệ thống API cho phép quản lý CV của người dùng và cung cấp tính năng đánh giá CV thông qua các chỉ số: Score, Progress, Strengths và Improvements. Hệ thống hỗ trợ cả đánh giá thủ công và đánh giá tự động sử dụng AI (Gemini API).

## 2. Xác thực

Tất cả các API đều yêu cầu xác thực qua JWT Token.

- **Authorization Header**: `Bearer [jwt_token]`

## 3. API Quản lý CV và Đánh giá

### 3.1. Lấy tất cả CV kèm đánh giá của người dùng

- **Endpoint**: `GET /api/cv/with-evaluations`
- **Access**: Private (yêu cầu JWT)
- **Description**: Trả về tất cả CV của người dùng hiện tại kèm theo đánh giá (nếu có)

**Query Parameters**:
- `page`: Số trang (mặc định: 1)
- `limit`: Số lượng CV trên mỗi trang (mặc định: 10)

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "_id": "cv_id_1",
      "name": "My Professional CV 2024",
      "userId": "user_id",
      "personalInfo": {
        "firstName": "John",
        "lastName": "Doe",
        "email": "john.doe@example.com",
        "phone": "+84123456789",
        "location": "Ho Chi Minh City",
        "country": "Vietnam"
      },
      "summary": "Experienced software developer...",
      "education": [
        {
          "degree": "Bachelor of Computer Science",
          "school": "Vietnam National University",
          "startDate": "2015-09-01",
          "endDate": "2019-06-30",
          "isPresent": false
        }
      ],
      "experience": [...],
      "skills": ["JavaScript", "React", "Node.js"],
      "projects": [...],
      "certifications": [...],
      "languages": [...],
      "additionalInfo": {...},
      "customFields": [...],
      "status": "draft",
      "createdAt": "2024-04-15T10:30:45.123Z",
      "updatedAt": "2024-04-15T10:30:45.123Z",
      "evaluation": {
        "_id": "evaluation_id_1",
        "cv": "cv_id_1",
        "score": 85,
        "progress": 92,
        "strengths": [
          "Strong technical skills section",
          "Clear work history with quantifiable achievements",
          "Well-structured education section"
        ],
        "improvements": [
          "Add more keywords relevant to target industry",
          "Expand professional summary",
          "Include more projects with measurable results"
        ],
        "isAutoGenerated": true,
        "evaluationDate": "2024-04-15T10:30:45.123Z",
        "createdAt": "2024-04-15T10:30:45.123Z",
        "updatedAt": "2024-04-15T10:30:45.123Z"
      }
    },
    {
      "_id": "cv_id_2",
      "name": "Creative CV",
      // ... CV data ...
      "evaluation": null  // Chưa có đánh giá
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 2,
    "pages": 1
  },
  "message": "CVs with evaluations retrieved successfully"
}
```

### 3.2. Lấy chi tiết một CV kèm đánh giá

- **Endpoint**: `GET /api/cv/:id/with-evaluation`
- **Access**: Private (yêu cầu JWT)
- **Parameters**:
  - `id`: ID của CV
  
**Success Response** (200):
```json
{
  "status": "success",
  "data": {
    "_id": "cv_id_1",
    "name": "My Professional CV 2024",
    "userId": "user_id",
    "personalInfo": {...},
    "summary": "...",
    "education": [...],
    "experience": [...],
    "skills": [...],
    "projects": [...],
    "certifications": [...],
    "languages": [...],
    "additionalInfo": {...},
    "customFields": [...],
    "status": "draft",
    "createdAt": "2024-04-15T10:30:45.123Z",
    "updatedAt": "2024-04-15T10:30:45.123Z",
    "evaluation": {
      "_id": "evaluation_id_1",
      "cv": "cv_id_1",
      "score": 85,
      "progress": 92,
      "strengths": [...],
      "improvements": [...],
      "isAutoGenerated": true,
      "evaluationDate": "2024-04-15T10:30:45.123Z",
      "createdAt": "2024-04-15T10:30:45.123Z",
      "updatedAt": "2024-04-15T10:30:45.123Z"
    }
  },
  "message": "CV with evaluation retrieved successfully"
}
```

### 3.3. Tạo/Cập nhật đánh giá cho CV

- **Endpoint**: `POST /api/cv/:cvId/evaluation`
- **Access**: Private (yêu cầu JWT)
- **Parameters**:
  - `cvId`: ID của CV
  
**Request Body**:
```json
{
  "score": 80,
  "progress": 85,
  "strengths": [
    "Clear and concise work history",
    "Well-organized skills section",
    "Professional summary highlights key qualifications"
  ],
  "improvements": [
    "Add more quantifiable achievements",
    "Include more industry-specific keywords",
    "Expand education details"
  ]
}
```

**Success Response** (201/200):
```json
{
  "status": "success",
  "data": {
    "_id": "evaluation_id",
    "cv": "cv_id",
    "score": 80,
    "progress": 85,
    "strengths": [...],
    "improvements": [...],
    "isAutoGenerated": false,
    "evaluationDate": "2024-04-15T10:30:45.123Z",
    "createdAt": "2024-04-15T10:30:45.123Z",
    "updatedAt": "2024-04-15T10:30:45.123Z"
  },
  "message": "CV evaluation created/updated successfully"
}
```

### 3.4. Tạo đánh giá tự động sử dụng AI

- **Endpoint**: `POST /api/cv/:cvId/evaluation/auto`
- **Access**: Private (yêu cầu JWT)
- **Parameters**:
  - `cvId`: ID của CV
- **Description**: Sử dụng AI để tự động đánh giá CV và tạo ra các điểm mạnh và gợi ý cải thiện

**Request Body**: Không cần

**Success Response** (200):
```json
{
  "status": "success",
  "data": {
    "_id": "evaluation_id",
    "cv": "cv_id",
    "score": 75,
    "progress": 80,
    "strengths": [
      "Strong technical skills section",
      "Clear work history with good chronology",
      "Education section shows relevant qualifications",
      "Well-formatted contact information"
    ],
    "improvements": [
      "Add more quantifiable achievements in work history",
      "Expand professional summary to highlight key strengths",
      "Include relevant certifications",
      "Add more industry-specific keywords"
    ],
    "isAutoGenerated": true,
    "evaluationDate": "2024-04-15T10:30:45.123Z",
    "createdAt": "2024-04-15T10:30:45.123Z",
    "updatedAt": "2024-04-15T10:30:45.123Z"
  },
  "message": "CV evaluated automatically"
}
```

### 3.5. Lấy đánh giá của một CV

- **Endpoint**: `GET /api/cv/:cvId/evaluation`
- **Access**: Private (yêu cầu JWT)
- **Parameters**:
  - `cvId`: ID của CV
  
**Success Response** (200):
```json
{
  "status": "success",
  "data": {
    "_id": "evaluation_id",
    "cv": "cv_id",
    "score": 75,
    "progress": 80,
    "strengths": [...],
    "improvements": [...],
    "isAutoGenerated": true,
    "evaluationDate": "2024-04-15T10:30:45.123Z",
    "createdAt": "2024-04-15T10:30:45.123Z",
    "updatedAt": "2024-04-15T10:30:45.123Z"
  },
  "message": "CV evaluation retrieved successfully"
}
```

## 4. Mã lỗi

Khi xảy ra lỗi, API sẽ trả về cấu trúc chung như sau:

```json
{
  "status": "error",
  "code": "ERROR_CODE",
  "message": "Error description"
}
```

### Các mã lỗi phổ biến:

- **VALIDATION_ERROR**: Dữ liệu không hợp lệ
- **CV_NOT_FOUND**: CV không tồn tại hoặc không thuộc về người dùng hiện tại
- **EVALUATION_NOT_FOUND**: Chưa có đánh giá cho CV này
- **AI_EVALUATION_ERROR**: Lỗi khi tạo đánh giá tự động bằng AI
- **CONFIG_ERROR**: Lỗi cấu hình (ví dụ: thiếu Gemini API key)
- **SERVER_ERROR**: Lỗi máy chủ

## 5. Hướng dẫn tích hợp cho Frontend

### 5.1. Hiển thị danh sách CV kèm đánh giá

```javascript
// Sử dụng Fetch API
async function fetchCVsWithEvaluations(page = 1, limit = 10) {
  try {
    const token = localStorage.getItem('token'); // Lấy JWT token từ localStorage
    
    const response = await fetch(`/api/cv/with-evaluations?page=${page}&limit=${limit}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      // Xử lý hiển thị CV và đánh giá
      displayCVsList(data.data);
      setupPagination(data.pagination);
    } else {
      // Xử lý lỗi
      showError(data.message);
    }
  } catch (error) {
    console.error('Error fetching CVs:', error);
    showError('Failed to load CVs. Please try again later.');
  }
}

// Hàm hiển thị danh sách CV và đánh giá
function displayCVsList(cvs) {
  const cvListContainer = document.getElementById('cv-list');
  cvListContainer.innerHTML = '';
  
  cvs.forEach(cv => {
    const cvCard = document.createElement('div');
    cvCard.className = 'cv-card';
    
    // Hiển thị thông tin cơ bản của CV
    cvCard.innerHTML = `
      <h3>${cv.name}</h3>
      <p>Cập nhật: ${new Date(cv.updatedAt).toLocaleDateString()}</p>
      <p>Trạng thái: ${cv.status}</p>
    `;
    
    // Hiển thị đánh giá nếu có
    if (cv.evaluation) {
      const evalDiv = document.createElement('div');
      evalDiv.className = 'evaluation-summary';
      evalDiv.innerHTML = `
        <div class="score-container">
          <div class="score">${cv.evaluation.score}/100</div>
          <div class="progress-bar" style="width: ${cv.evaluation.progress}%"></div>
        </div>
        <p>Completed: ${cv.evaluation.progress}%</p>
        <button class="view-details-btn" data-id="${cv._id}">View Details</button>
      `;
      cvCard.appendChild(evalDiv);
    } else {
      // Hiển thị nút tạo đánh giá nếu chưa có
      const evalButton = document.createElement('button');
      evalButton.className = 'evaluate-btn';
      evalButton.textContent = 'Evaluate CV';
      evalButton.dataset.id = cv._id;
      evalButton.addEventListener('click', () => generateAutomaticEvaluation(cv._id));
      cvCard.appendChild(evalButton);
    }
    
    cvListContainer.appendChild(cvCard);
  });
}
```

### 5.2. Tạo đánh giá tự động bằng AI

```javascript
async function generateAutomaticEvaluation(cvId) {
  try {
    const token = localStorage.getItem('token');
    
    // Hiển thị loading spinner
    showLoading(true);
    
    const response = await fetch(`/api/cv/${cvId}/evaluation/auto`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    showLoading(false);
    
    if (data.status === 'success') {
      // Hiển thị thông báo thành công
      showSuccess('CV evaluated successfully');
      
      // Cập nhật giao diện
      fetchCVsWithEvaluations(); // Tải lại danh sách CV
    } else {
      // Xử lý lỗi
      showError(data.message);
    }
  } catch (error) {
    showLoading(false);
    console.error('Error evaluating CV:', error);
    showError('Failed to evaluate CV. Please try again later.');
  }
}
```

### 5.3. Hiển thị chi tiết một CV kèm đánh giá

```javascript
async function fetchCVWithEvaluation(cvId) {
  try {
    const token = localStorage.getItem('token');
    
    const response = await fetch(`/api/cv/${cvId}/with-evaluation`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      // Hiển thị chi tiết CV và đánh giá
      displayCVDetails(data.data);
    } else {
      // Xử lý lỗi
      showError(data.message);
    }
  } catch (error) {
    console.error('Error fetching CV details:', error);
    showError('Failed to load CV details. Please try again later.');
  }
}

function displayCVDetails(cv) {
  // Hiển thị thông tin CV
  document.getElementById('cv-title').textContent = cv.name;
  document.getElementById('cv-summary').textContent = cv.summary || 'No summary provided';
  
  // Hiển thị thông tin cá nhân
  const personalInfo = cv.personalInfo;
  document.getElementById('full-name').textContent = `${personalInfo.firstName} ${personalInfo.lastName}`;
  document.getElementById('email').textContent = personalInfo.email;
  document.getElementById('phone').textContent = personalInfo.phone;
  document.getElementById('location').textContent = `${personalInfo.location}, ${personalInfo.country}`;
  
  // Hiển thị kỹ năng
  const skillsList = document.getElementById('skills-list');
  skillsList.innerHTML = '';
  cv.skills.forEach(skill => {
    const skillItem = document.createElement('li');
    skillItem.textContent = skill;
    skillsList.appendChild(skillItem);
  });
  
  // Hiển thị kinh nghiệm làm việc
  displayWorkExperience(cv.experience);
  
  // Hiển thị học vấn
  displayEducation(cv.education);
  
  // Hiển thị đánh giá nếu có
  if (cv.evaluation) {
    document.getElementById('evaluation-section').style.display = 'block';
    
    // Hiển thị điểm và tiến độ
    document.getElementById('cv-score').textContent = cv.evaluation.score;
    document.getElementById('cv-progress').textContent = `${cv.evaluation.progress}%`;
    document.getElementById('progress-bar-inner').style.width = `${cv.evaluation.progress}%`;
    
    // Hiển thị điểm mạnh
    const strengthsList = document.getElementById('strengths-list');
    strengthsList.innerHTML = '';
    cv.evaluation.strengths.forEach(strength => {
      const item = document.createElement('li');
      item.textContent = strength;
      strengthsList.appendChild(item);
    });
    
    // Hiển thị gợi ý cải thiện
    const improvementsList = document.getElementById('improvements-list');
    improvementsList.innerHTML = '';
    cv.evaluation.improvements.forEach(improvement => {
      const item = document.createElement('li');
      item.textContent = improvement;
      improvementsList.appendChild(item);
    });
    
    // Hiển thị trạng thái đánh giá (tự động hay thủ công)
    document.getElementById('evaluation-type').textContent = 
      cv.evaluation.isAutoGenerated ? 'AI Generated' : 'Manually Created';
    
    // Hiển thị ngày đánh giá
    document.getElementById('evaluation-date').textContent = 
      new Date(cv.evaluation.evaluationDate).toLocaleString();
  } else {
    // Ẩn phần đánh giá nếu chưa có
    document.getElementById('evaluation-section').style.display = 'none';
  }
}
```

### 5.4. Tạo hoặc cập nhật đánh giá thủ công

```javascript
async function createOrUpdateEvaluation(cvId, evaluationData) {
  try {
    const token = localStorage.getItem('token');
    
    const response = await fetch(`/api/cv/${cvId}/evaluation`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(evaluationData)
    });
    
    const data = await response.json();
    
    if (data.status === 'success') {
      showSuccess('Evaluation saved successfully');
      return true;
    } else {
      showError(data.message);
      return false;
    }
  } catch (error) {
    console.error('Error saving evaluation:', error);
    showError('Failed to save evaluation. Please try again later.');
    return false;
  }
}

// Lấy dữ liệu từ form và gửi đến server
document.getElementById('evaluation-form').addEventListener('submit', async (event) => {
  event.preventDefault();
  
  const cvId = document.getElementById('cv-id').value;
  
  const evaluationData = {
    score: parseInt(document.getElementById('score-input').value, 10),
    progress: parseInt(document.getElementById('progress-input').value, 10),
    strengths: getArrayFromTextarea('strengths-textarea'),
    improvements: getArrayFromTextarea('improvements-textarea')
  };
  
  const success = await createOrUpdateEvaluation(cvId, evaluationData);
  
  if (success) {
    // Quay lại trang chi tiết CV
    fetchCVWithEvaluation(cvId);
  }
});

// Hàm phụ trợ để chuyển đổi textarea thành mảng các mục
function getArrayFromTextarea(textareaId) {
  const text = document.getElementById(textareaId).value;
  if (!text.trim()) return [];
  
  // Tách văn bản thành các dòng và lọc bỏ dòng trống
  return text.split('\n')
    .map(line => line.trim())
    .filter(line => line.length > 0);
}
```

## 6. Lưu ý quan trọng

1. **Xác thực**: Tất cả các API đều yêu cầu JWT token hợp lệ
2. **Đánh giá CV**: Đánh giá tự động (AI) có thể mất thời gian, nên cần hiển thị trạng thái loading
3. **Hiển thị đánh giá**: Đảm bảo xử lý trường hợp CV chưa có đánh giá (evaluation = null)
4. **Xử lý lỗi**: Luôn kiểm tra status trong phản hồi và hiển thị thông báo lỗi phù hợp
5. **Responsive Design**: Thiết kế giao diện hiển thị đánh giá sao cho phù hợp với cả thiết bị di động và desktop

---

Tài liệu này cung cấp hướng dẫn đầy đủ về cách tích hợp và sử dụng các API đánh giá CV trong hệ thống của bạn. Frontend developers có thể sử dụng các ví dụ code để hiển thị và quản lý CV cùng với đánh giá của chúng một cách hiệu quả.
