const CVEvaluation = require('../models/cvEvaluationModel');
const CV = require('../models/cvModel');
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const aiEvaluationService = require('../utils/aiEvaluation');

/**
 * @desc    Tạo đánh giá CV mới
 * @route   POST /api/cv/:cvId/evaluation
 * @access  Private
 */
const createCVEvaluation = async (req, res) => {
  try {
    const { cvId } = req.params;
    const userId = req.user._id;

    // Kiểm tra xem CV có tồn tại và thuộc về người dùng hiện tại không
    const cv = await CV.findOne({ _id: cvId, userId });
    if (!cv) {
      return res.status(404).json({
        status: 'error',
        code: 'CV_NOT_FOUND',
        message: 'CV not found or not authorized'
      });
    }

    // Kiểm tra xem đã có đánh giá cho CV này chưa
    let evaluation = await CVEvaluation.findOne({ cv: cvId });

    // Nếu đã có đánh giá, cập nhật đánh giá hiện có
    if (evaluation) {
      evaluation.score = req.body.score || evaluation.score;
      evaluation.progress = req.body.progress || evaluation.progress;
      evaluation.strengths = req.body.strengths || evaluation.strengths;
      evaluation.improvements = req.body.improvements || evaluation.improvements;
      evaluation.isAutoGenerated = false;
      evaluation.evaluationDate = Date.now();
      
      await evaluation.save();
      
      return res.status(200).json({
        status: 'success',
        data: evaluation,
        message: 'CV evaluation updated successfully'
      });
    }

    // Nếu chưa có đánh giá, tạo đánh giá mới
    const newEvaluation = new CVEvaluation({
      cv: cvId,
      score: req.body.score || 0,
      progress: req.body.progress || 0,
      strengths: req.body.strengths || [],
      improvements: req.body.improvements || [],
      isAutoGenerated: false
    });

    await newEvaluation.save();

    return res.status(201).json({
      status: 'success',
      data: newEvaluation,
      message: 'CV evaluation created successfully'
    });
  } catch (error) {
    console.error('Error creating CV evaluation:', error);
    return res.status(500).json({
      status: 'error',
      code: 'SERVER_ERROR',
      message: 'Failed to create CV evaluation',
      error: error.message
    });
  }
};

/**
 * @desc    Tự động tạo đánh giá CV sử dụng AI
 * @route   POST /api/cv/:cvId/auto-evaluation
 * @access  Private
 */
const generateAutomaticEvaluation = async (req, res) => {
  try {
    const { cvId } = req.params;
    const userId = req.user._id;

    // Kiểm tra xem CV có tồn tại và thuộc về người dùng hiện tại không
    const cv = await CV.findOne({ _id: cvId, userId }).lean();
    if (!cv) {
      return res.status(404).json({
        status: 'error',
        code: 'CV_NOT_FOUND',
        message: 'CV not found or not authorized'
      });
    }

    // Sử dụng service để đánh giá CV
    const evaluationData = await aiEvaluationService.evaluateCV(cv);

    // Tìm và cập nhật đánh giá hiện có hoặc tạo mới
    let evaluation = await CVEvaluation.findOne({ cv: cvId });
    
    if (evaluation) {
      evaluation.score = evaluationData.score;
      evaluation.progress = evaluationData.progress;
      evaluation.strengths = evaluationData.strengths;
      evaluation.improvements = evaluationData.improvements;
      evaluation.isAutoGenerated = true;
      evaluation.evaluationDate = Date.now();
      
      await evaluation.save();
    } else {
      evaluation = new CVEvaluation({
        cv: cvId,
        score: evaluationData.score,
        progress: evaluationData.progress,
        strengths: evaluationData.strengths,
        improvements: evaluationData.improvements,
        isAutoGenerated: true
      });
      
      await evaluation.save();
    }

    return res.status(200).json({
      status: 'success',
      data: evaluation,
      message: 'CV evaluated automatically'
    });
  } catch (error) {
    console.error('Error generating automatic evaluation:', error);
    return res.status(500).json({
      status: 'error',
      code: 'AI_EVALUATION_ERROR',
      message: 'Failed to evaluate CV automatically',
      error: error.message
    });
  }
};

/**
 * @desc    Tự động tạo đánh giá CV sử dụng AI từ dữ liệu gửi lên
 * @route   POST /api/cv/evaluate-from-data
 * @access  Private
 */
const generateAutomaticEvaluationFromData = async (req, res) => {
  try {
    const userId = req.user._id;
    const cvData = req.body.cvData;
    const cvId = req.body.cvId; // Optional: cvId nếu muốn lưu đánh giá vào DB

    // Kiểm tra dữ liệu CV
    if (!cvData || typeof cvData !== 'object') {
      return res.status(400).json({
        status: 'error',
        code: 'INVALID_DATA',
        message: 'Invalid CV data provided'
      });
    }

    // Sử dụng service để đánh giá CV từ dữ liệu
    const evaluationData = await aiEvaluationService.evaluateCVFromData(cvData);

    // Nếu có cvId và muốn lưu đánh giá vào database
    if (cvId) {
      // Kiểm tra xem CV có tồn tại và thuộc về người dùng hiện tại không
      const cv = await CV.findOne({ _id: cvId, userId });
      if (!cv) {
        return res.status(404).json({
          status: 'error',
          code: 'CV_NOT_FOUND',
          message: 'CV not found or not authorized'
        });
      }

      // Tìm và cập nhật đánh giá hiện có hoặc tạo mới
      let evaluation = await CVEvaluation.findOne({ cv: cvId });
      
      if (evaluation) {
        evaluation.score = evaluationData.score;
        evaluation.progress = evaluationData.progress;
        evaluation.strengths = evaluationData.strengths;
        evaluation.improvements = evaluationData.improvements;
        evaluation.isAutoGenerated = true;
        evaluation.evaluationDate = Date.now();
        
        await evaluation.save();
      } else {
        evaluation = new CVEvaluation({
          cv: cvId,
          score: evaluationData.score,
          progress: evaluationData.progress,
          strengths: evaluationData.strengths,
          improvements: evaluationData.improvements,
          isAutoGenerated: true
        });
        
        await evaluation.save();
      }

      return res.status(200).json({
        status: 'success',
        data: {
          ...evaluationData,
          _id: evaluation._id,
          cv: evaluation.cv,
          isAutoGenerated: true,
          evaluationDate: evaluation.evaluationDate,
          createdAt: evaluation.createdAt,
          updatedAt: evaluation.updatedAt
        },
        message: 'CV evaluated automatically and saved'
      });
    }

    // Nếu không lưu vào database, chỉ trả về kết quả đánh giá
    return res.status(200).json({
      status: 'success',
      data: {
        ...evaluationData,
        isAutoGenerated: true,
        evaluationDate: new Date()
      },
      message: 'CV evaluated automatically'
    });
  } catch (error) {
    console.error('Error generating automatic evaluation from data:', error);
    return res.status(500).json({
      status: 'error',
      code: 'AI_EVALUATION_ERROR',
      message: 'Failed to evaluate CV automatically',
      error: error.message
    });
  }
};

/**
 * @desc    Lấy đánh giá CV
 * @route   GET /api/cv/:cvId/evaluation
 * @access  Private
 */
const getCVEvaluation = async (req, res) => {
  try {
    const { cvId } = req.params;
    const userId = req.user._id;

    // Kiểm tra xem CV có tồn tại và thuộc về người dùng hiện tại không
    const cv = await CV.findOne({ _id: cvId, userId });
    if (!cv) {
      return res.status(404).json({
        status: 'error',
        code: 'CV_NOT_FOUND',
        message: 'CV not found or not authorized'
      });
    }

    // Tìm đánh giá
    const evaluation = await CVEvaluation.findOne({ cv: cvId });
    
    if (!evaluation) {
      return res.status(404).json({
        status: 'error',
        code: 'EVALUATION_NOT_FOUND',
        message: 'Evaluation not found for this CV'
      });
    }

    return res.status(200).json({
      status: 'success',
      data: evaluation,
      message: 'CV evaluation retrieved successfully'
    });
  } catch (error) {
    console.error('Error getting CV evaluation:', error);
    return res.status(500).json({
      status: 'error',
      code: 'SERVER_ERROR',
      message: 'Failed to get CV evaluation',
      error: error.message
    });
  }
};

module.exports = {
  createCVEvaluation,
  generateAutomaticEvaluation,
  generateAutomaticEvaluationFromData,
  getCVEvaluation
}; 